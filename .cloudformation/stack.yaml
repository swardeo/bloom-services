AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bloom Services Stack'

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - prod
      - dev

  CertificateArn:
    Type: String
    NoEcho: true

  LambdaHealthVersion:
    Type: String

  LambdaSavingsAddVersion:
    Type: String

  LambdaSavingsDeleteVersion:
    Type: String

  LambdaSavingsListVersion:
    Type: String

  LambdaSavingsUpdateVersion:
    Type: String

  LambdaDebtsAddVersion:
    Type: String

  LambdaDebtsDeleteVersion:
    Type: String

  LambdaDebtsListVersion:
    Type: String

  LambdaDebtsUpdateVersion:
    Type: String

Conditions:
  IsProduction: !Equals [!Ref Environment, prod]

Resources:
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub '${Environment}-bloom-user-pool'
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: "You've been invited to Bloom! Your username is {username} and temporary password is {####}."
          EmailSubject: 'Your temporary password'
        UnusedAccountValidityDays: 7
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: 'verified_email'
            Priority: 1
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: 'Welcome to Bloom! Here is your verification code: {####}.'
      EmailVerificationSubject: 'Your Bloom verification code'
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true

  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub '${Environment}-auth-client'
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub '${Environment}-bloom-identity'
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  CognitoUnauthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: '*'

  # Once known, restrict access to only be able to invoke one API.
  CognitoAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*'

  IdentityPoolRoleMapping:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnauthorizedRole.Arn

  UserTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: !Sub '${Environment}-bloom-db'
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: !If [IsProduction, 10, 3]
        WriteCapacityUnits: !If [IsProduction, 7, 2]

  LambdaHealth:
    DependsOn: LambdaHealthRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: bloom-services-artifacts
        S3Key: !Sub 'bloom-health-${LambdaHealthVersion}.zip'
      Description: Bloom Health Function
      FunctionName: !Sub '${Environment}-bloom-health'
      Handler: handler.HealthHandler::handleRequest
      Environment:
        Variables:
          DYNAMO_DB_TABLE_NAME: !Sub '${Environment}-bloom-db'
      MemorySize: 256
      Role: !GetAtt LambdaHealthRole.Arn
      Runtime: java11
      Timeout: 15
      Tags:
        - Key: 'version'
          Value: !Ref LambdaHealthVersion

  LambdaHealthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  LambdaHealthInvokePolicy:
    DependsOn: ['LambdaHealth', 'ApiGatewayRole']
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: health-invoke-policy
      Roles:
        - !Ref ApiGatewayRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'lambda:InvokeFunction'
          Resource: !GetAtt LambdaHealth.Arn

  LambdaSavingsAdd:
    DependsOn: LambdaSavingsAddRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: bloom-services-artifacts
        S3Key: !Sub 'bloom-savings-add-${LambdaSavingsAddVersion}.zip'
      Description: Bloom Savings Add Function
      FunctionName: !Sub '${Environment}-bloom-savings-add'
      Handler: handler.AddSavingHandler::handleRequest
      Environment:
        Variables:
          DYNAMO_DB_TABLE_NAME: !Sub '${Environment}-bloom-db'
      MemorySize: 512
      Role: !GetAtt LambdaSavingsAddRole.Arn
      Runtime: java11
      Timeout: 15
      Tags:
        - Key: 'version'
          Value: !Ref LambdaSavingsAddVersion

  LambdaSavingsAddRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  LambdaSavingsAddInvokePolicy:
    DependsOn: ['LambdaSavingsAdd', 'ApiGatewayRole']
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: savings-add-invoke-policy
      Roles:
        - !Ref ApiGatewayRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'lambda:InvokeFunction'
          Resource: !GetAtt LambdaSavingsAdd.Arn

  LambdaSavingsDelete:
    DependsOn: LambdaSavingsDeleteRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: bloom-services-artifacts
        S3Key: !Sub 'bloom-savings-delete-${LambdaSavingsDeleteVersion}.zip'
      Description: Bloom Savings Delete Function
      FunctionName: !Sub '${Environment}-bloom-savings-delete'
      Handler: handler.DeleteSavingHandler::handleRequest
      Environment:
        Variables:
          DYNAMO_DB_TABLE_NAME: !Sub '${Environment}-bloom-db'
      MemorySize: 512
      Role: !GetAtt LambdaSavingsDeleteRole.Arn
      Runtime: java11
      Timeout: 15
      Tags:
        - Key: 'version'
          Value: !Ref LambdaSavingsDeleteVersion

  LambdaSavingsDeleteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  LambdaSavingsDeleteInvokePolicy:
    DependsOn: ['LambdaSavingsDelete', 'ApiGatewayRole']
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: savings-delete-invoke-policy
      Roles:
        - !Ref ApiGatewayRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'lambda:InvokeFunction'
          Resource: !GetAtt LambdaSavingsDelete.Arn

  LambdaSavingsList:
    DependsOn: LambdaSavingsListRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: bloom-services-artifacts
        S3Key: !Sub 'bloom-savings-list-${LambdaSavingsListVersion}.zip'
      Description: Bloom Savings List Function
      FunctionName: !Sub '${Environment}-bloom-savings-list'
      Handler: handler.ListSavingsHandler::handleRequest
      Environment:
        Variables:
          DYNAMO_DB_TABLE_NAME: !Sub '${Environment}-bloom-db'
      MemorySize: 512
      Role: !GetAtt LambdaSavingsListRole.Arn
      Runtime: java11
      Timeout: 15
      Tags:
        - Key: 'version'
          Value: !Ref LambdaSavingsListVersion

  LambdaSavingsListRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  LambdaSavingsListInvokePolicy:
    DependsOn: ['LambdaSavingsList', 'ApiGatewayRole']
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: savings-list-invoke-policy
      Roles:
        - !Ref ApiGatewayRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'lambda:InvokeFunction'
          Resource: !GetAtt LambdaSavingsList.Arn

  LambdaSavingsUpdate:
    DependsOn: LambdaSavingsUpdateRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: bloom-services-artifacts
        S3Key: !Sub 'bloom-savings-update-${LambdaSavingsUpdateVersion}.zip'
      Description: Bloom Savings Update Function
      FunctionName: !Sub '${Environment}-bloom-savings-update'
      Handler: handler.UpdateSavingHandler::handleRequest
      Environment:
        Variables:
          DYNAMO_DB_TABLE_NAME: !Sub '${Environment}-bloom-db'
      MemorySize: 512
      Role: !GetAtt LambdaSavingsUpdateRole.Arn
      Runtime: java11
      Timeout: 15
      Tags:
        - Key: 'version'
          Value: !Ref LambdaSavingsUpdateVersion

  LambdaSavingsUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  LambdaSavingsUpdateInvokePolicy:
    DependsOn: ['LambdaSavingsUpdate', 'ApiGatewayRole']
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: savings-update-invoke-policy
      Roles:
        - !Ref ApiGatewayRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'lambda:InvokeFunction'
          Resource: !GetAtt LambdaSavingsUpdate.Arn

  LambdaDebtsAdd:
    DependsOn: LambdaDebtsAddRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: bloom-services-artifacts
        S3Key: !Sub 'bloom-debts-add-${LambdaDebtsAddVersion}.zip'
      Description: Bloom Debts Add Function
      FunctionName: !Sub '${Environment}-bloom-debts-add'
      Handler: handler.AddDebtHandler::handleRequest
      Environment:
        Variables:
          DYNAMO_DB_TABLE_NAME: !Sub '${Environment}-bloom-db'
      MemorySize: 512
      Role: !GetAtt LambdaDebtsAddRole.Arn
      Runtime: java11
      Timeout: 15
      Tags:
        - Key: 'version'
          Value: !Ref LambdaDebtsAddVersion

  LambdaDebtsAddRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  LambdaDebtsAddPolicy:
    DependsOn: ['LambdaDebtsAdd', 'ApiGatewayRole']
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: debts-add-invoke-policy
      Roles:
        - !Ref ApiGatewayRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'lambda:InvokeFunction'
          Resource: !GetAtt LambdaDebtsAdd.Arn

  LambdaDebtsDelete:
    DependsOn: LambdaDebtsDeleteRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: bloom-services-artifacts
        S3Key: !Sub 'bloom-debts-delete-${LambdaDebtsDeleteVersion}.zip'
      Description: Bloom Debts Delete Function
      FunctionName: !Sub '${Environment}-bloom-debts-delete'
      Handler: handler.DeleteDebtHandler::handleRequest
      Environment:
        Variables:
          DYNAMO_DB_TABLE_NAME: !Sub '${Environment}-bloom-db'
      MemorySize: 512
      Role: !GetAtt LambdaDebtsDeleteRole.Arn
      Runtime: java11
      Timeout: 15
      Tags:
        - Key: 'version'
          Value: !Ref LambdaDebtsDeleteVersion

  LambdaDebtsDeleteRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  LambdaDebtsDeletePolicy:
    DependsOn: ['LambdaDebtsDelete', 'ApiGatewayRole']
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: debts-delete-invoke-policy
      Roles:
        - !Ref ApiGatewayRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'lambda:InvokeFunction'
          Resource: !GetAtt LambdaDebtsDelete.Arn

  LambdaDebtsList:
    DependsOn: LambdaDebtsListRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: bloom-services-artifacts
        S3Key: !Sub 'bloom-debts-list-${LambdaDebtsListVersion}.zip'
      Description: Bloom Debts List Function
      FunctionName: !Sub '${Environment}-bloom-debts-list'
      Handler: handler.ListDebtsHandler::handleRequest
      Environment:
        Variables:
          DYNAMO_DB_TABLE_NAME: !Sub '${Environment}-bloom-db'
      MemorySize: 512
      Role: !GetAtt LambdaDebtsListRole.Arn
      Runtime: java11
      Timeout: 15
      Tags:
        - Key: 'version'
          Value: !Ref LambdaDebtsListVersion

  LambdaDebtsListRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  LambdaDebtsListPolicy:
    DependsOn: ['LambdaDebtsList', 'ApiGatewayRole']
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: debts-list-invoke-policy
      Roles:
        - !Ref ApiGatewayRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'lambda:InvokeFunction'
          Resource: !GetAtt LambdaDebtsList.Arn

  LambdaDebtsUpdate:
    DependsOn: LambdaDebtsUpdateRole
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: bloom-services-artifacts
        S3Key: !Sub 'bloom-debts-update-${LambdaDebtsUpdateVersion}.zip'
      Description: Bloom Debts Update Function
      FunctionName: !Sub '${Environment}-bloom-debts-update'
      Handler: handler.UpdateDebtHandler::handleRequest
      Environment:
        Variables:
          DYNAMO_DB_TABLE_NAME: !Sub '${Environment}-bloom-db'
      MemorySize: 512
      Role: !GetAtt LambdaDebtsUpdateRole.Arn
      Runtime: java11
      Timeout: 15
      Tags:
        - Key: 'version'
          Value: !Ref LambdaDebtsUpdateVersion

  LambdaDebtsUpdateRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'

  LambdaDebtsUpdatePolicy:
    DependsOn: ['LambdaDebtsUpdate', 'ApiGatewayRole']
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: debts-update-invoke-policy
      Roles:
        - !Ref ApiGatewayRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'lambda:InvokeFunction'
          Resource: !GetAtt LambdaDebtsUpdate.Arn

  LambdaLoggingPolicy:
    DependsOn:
      [
        'LambdaHealthRole',
        'LambdaSavingsAddRole',
        'LambdaSavingsDeleteRole',
        'LambdaSavingsListRole',
        'LambdaSavingsUpdateRole',
        'LambdaDebtsAddRole',
        'LambdaDebtsDeleteRole',
        'LambdaDebtsListRole',
        'LambdaDebtsUpdateRole',
      ]
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: lambda-logging-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'
      Roles:
        - !Ref LambdaHealthRole
        - !Ref LambdaSavingsAddRole
        - !Ref LambdaSavingsDeleteRole
        - !Ref LambdaSavingsListRole
        - !Ref LambdaSavingsUpdateRole
        - !Ref LambdaDebtsAddRole
        - !Ref LambdaDebtsDeleteRole
        - !Ref LambdaDebtsListRole
        - !Ref LambdaDebtsUpdateRole

  UserTableReadPolicy:
    DependsOn:
      [
        'UserTable',
        'LambdaHealthRole',
        'LambdaSavingsListRole',
        'LambdaDebtsListRole',
      ]
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: user-table-read-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'dynamodb:DescribeTable'
            - 'dynamodb:GetItem'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Environment}-bloom-db'
      Roles:
        - !Ref LambdaHealthRole
        - !Ref LambdaSavingsListRole
        - !Ref LambdaDebtsListRole

  UserTableWritePolicy:
    DependsOn:
      [
        'UserTable',
        'LambdaSavingsAddRole',
        'LambdaSavingsDeleteRole',
        'LambdaSavingsUpdateRole',
        'LambdaDebtsAddRole',
        'LambdaDebtsDeleteRole',
        'LambdaDebtsUpdateRole',
      ]
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: user-table-write-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:UpdateItem'
            - 'dynamodb:DeleteItem'
          Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${Environment}-bloom-db'
      Roles:
        - !Ref LambdaSavingsAddRole
        - !Ref LambdaSavingsDeleteRole
        - !Ref LambdaSavingsUpdateRole
        - !Ref LambdaDebtsAddRole
        - !Ref LambdaDebtsDeleteRole
        - !Ref LambdaDebtsUpdateRole

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action: 'sts:AssumeRole'

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${Environment}-bloom-api'

  Authorizer:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub '${Environment}-bloom-authorizer'
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt UserPool.Arn
      RestApiId: !Ref ApiGateway

  ResourceHealth:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'health'
      RestApiId: !Ref ApiGateway

  ResourceSavings:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'savings'
      RestApiId: !Ref ApiGateway

  ResourceSavingsName:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ResourceSavings
      PathPart: '{name}'
      RestApiId: !Ref ApiGateway

  ResourceDebts:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'debts'
      RestApiId: !Ref ApiGateway

  ResourceDebtsName:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Ref ResourceDebts
      PathPart: '{name}'
      RestApiId: !Ref ApiGateway

  MethodHealth:
    DependsOn:
      ['ApiGateway', 'ResourceHealth', 'ApiGatewayRole', 'LambdaHealth']
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaHealth.Arn}/invocations'
        PassthroughBehavior: NEVER
      ResourceId: !Ref ResourceHealth
      RestApiId: !Ref ApiGateway

  MethodSavingsOptions:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      ResourceId: !Ref ResourceSavings
      RestApiId: !Ref ApiGateway

  MethodSavingsNameOptions:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      ResourceId: !Ref ResourceSavingsName
      RestApiId: !Ref ApiGateway

  MethodDebtsOptions:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      ResourceId: !Ref ResourceDebts
      RestApiId: !Ref ApiGateway

  MethodDebtsNameOptions:
    DependsOn: ApiGateway
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,PUT,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      ResourceId: !Ref ResourceDebtsName
      RestApiId: !Ref ApiGateway

  MethodSavingsAdd:
    DependsOn:
      ['ApiGateway', 'ResourceSavings', 'ApiGatewayRole', 'LambdaSavingsAdd']
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaSavingsAdd.Arn}/invocations'
        PassthroughBehavior: NEVER
      ResourceId: !Ref ResourceSavings
      RestApiId: !Ref ApiGateway

  MethodSavingsDelete:
    DependsOn:
      [
        'ApiGateway',
        'ResourceSavingsName',
        'ApiGatewayRole',
        'LambdaSavingsDelete',
      ]
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaSavingsDelete.Arn}/invocations'
        PassthroughBehavior: NEVER
      ResourceId: !Ref ResourceSavingsName
      RestApiId: !Ref ApiGateway

  MethodSavingsList:
    DependsOn:
      ['ApiGateway', 'ResourceSavings', 'ApiGatewayRole', 'LambdaSavingsList']
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaSavingsList.Arn}/invocations'
        PassthroughBehavior: NEVER
      ResourceId: !Ref ResourceSavings
      RestApiId: !Ref ApiGateway

  MethodSavingsUpdate:
    DependsOn:
      [
        'ApiGateway',
        'ResourceSavingsName',
        'ApiGatewayRole',
        'LambdaSavingsUpdate',
      ]
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaSavingsUpdate.Arn}/invocations'
        PassthroughBehavior: NEVER
      ResourceId: !Ref ResourceSavingsName
      RestApiId: !Ref ApiGateway

  MethodDebtsAdd:
    DependsOn:
      ['ApiGateway', 'ResourceDebts', 'ApiGatewayRole', 'LambdaDebtsAdd']
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaDebtsAdd.Arn}/invocations'
        PassthroughBehavior: NEVER
      ResourceId: !Ref ResourceDebts
      RestApiId: !Ref ApiGateway

  MethodDebtsDelete:
    DependsOn:
      ['ApiGateway', 'ResourceDebtsName', 'ApiGatewayRole', 'LambdaDebtsDelete']
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: DELETE
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaDebtsDelete.Arn}/invocations'
        PassthroughBehavior: NEVER
      ResourceId: !Ref ResourceDebtsName
      RestApiId: !Ref ApiGateway

  MethodDebtsList:
    DependsOn:
      ['ApiGateway', 'ResourceDebts', 'ApiGatewayRole', 'LambdaDebtsList']
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaDebtsList.Arn}/invocations'
        PassthroughBehavior: NEVER
      ResourceId: !Ref ResourceDebts
      RestApiId: !Ref ApiGateway

  MethodDebtsUpdate:
    DependsOn:
      ['ApiGateway', 'ResourceDebtsName', 'ApiGatewayRole', 'LambdaDebtsUpdate']
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: PUT
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref Authorizer
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaDebtsUpdate.Arn}/invocations'
        PassthroughBehavior: NEVER
      ResourceId: !Ref ResourceDebtsName
      RestApiId: !Ref ApiGateway

  DeployGateway:
    DependsOn:
      [
        'ApiGateway',
        'MethodHealth',
        'MethodSavingsAdd',
        'MethodSavingsOptions',
        'MethodSavingsDelete',
        'MethodSavingsList',
        'MethodSavingsUpdate',
        'MethodSavingsNameOptions',
        'MethodDebtsAdd',
        'MethodDebtsOptions',
        'MethodDebtsDelete',
        'MethodDebtsList',
        'MethodDebtsUpdate',
        'MethodDebtsNameOptions',
      ]
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Sub '${Environment}'

  GatewayDomain:
    DependsOn: ApiGateway
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: !If [IsProduction, 'api.bloom.money', 'dev-api.bloom.money']
      CertificateArn: !Ref CertificateArn
      SecurityPolicy: 'TLS_1_2'

  DomainMapping:
    DependsOn: ['DeployGateway', 'GatewayRecord']
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: ''
      DomainName: !If [IsProduction, 'api.bloom.money', 'dev-api.bloom.money']
      RestApiId: !Ref ApiGateway
      Stage: !Sub '${Environment}'

  GatewayRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !If [IsProduction, 'api.bloom.money', 'dev-api.bloom.money']
      Type: A
      HostedZoneName: bloom.money.
      AliasTarget:
        DNSName: !GetAtt GatewayDomain.DistributionDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt GatewayDomain.DistributionHostedZoneId
